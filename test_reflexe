from kivy.app import App
from kivy.uix.widget import Widget
from kivy.graphics import Color, Rectangle
from kivy.uix.button import Button
from kivy.clock import Clock
from random import randint
from kivy.uix.floatlayout import FloatLayout
import time
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout

class CustomWidget(Widget):
    def __init__(self, **kwargs):
        super(CustomWidget, self).__init__(**kwargs)
        self.color = Color(0.5, 0.5, 0.5)  # Couleur grise initiale
        self.rect = Rectangle(pos=self.pos, size=self.size)
        self.canvas.add(self.color)
        self.canvas.add(self.rect)

        layout = FloatLayout()

        self.button = Button(text='Commencer', size_hint=(None, None), size=(200, 100), pos_hint={'center_x': 4, 'center_y': 3}, color=(0, 0, 0, 1))
        self.button.bind(on_release=self.on_button_click)
        layout.add_widget(self.button)

        self.label = Label(text='', size_hint=(None, None), font_size=48, color=(0, 0, 0, 1))
        layout.add_widget(self.label)

        self.number_label = Label(text='', font_size=64, color=(0, 0, 0, 1))
        layout.add_widget(self.number_label)

        self.add_widget(layout)

        self.start_time = None
        self.duration = 0
        self.timer_event = None
        self.popup = None

    def on_size(self, *args):
        self.rect.pos = self.pos
        self.rect.size = self.size

    def on_button_click(self, *args):
        self.button.disabled = True
        self.show_duration_popup()

    def show_duration_popup(self, *args):
        content = BoxLayout(orientation='vertical', spacing='10dp', padding='10dp')
        self.popup = Popup(title='Choisir la durée', content=content, size_hint=(None, None), size=('250dp', '200dp'))

        btn_1m = Button(text='1 minute', size_hint=(1, None), height='40dp', color=(0, 0, 0, 1))
        btn_1m.bind(on_release=lambda btn: self.start_suite(60))
        content.add_widget(btn_1m)

        btn_1m30 = Button(text='1 minute 30 secondes', size_hint=(1, None), height='40dp', color=(0, 0, 0, 1))
        btn_1m30.bind(on_release=lambda btn: self.start_suite(90))
        content.add_widget(btn_1m30)

        btn_2m = Button(text='2 minutes', size_hint=(1, None), height='40dp', color=(0, 0, 0, 1))
        btn_2m.bind(on_release=lambda btn: self.start_suite(120))
        content.add_widget(btn_2m)

        self.popup.open()

    def start_suite(self, duration):
        self.popup.dismiss()
        self.popup = None
        self.button.opacity = 0  # Masquer le bouton "Commencer"
        self.color.rgb = (0.8, 0.8, 0.8)  # Couleur grise initiale
        self.start_time = time.time()
        self.duration = duration
        self.label.text = f"Temps restant : {self.duration} secondes"
        self.label.pos = (self.width / 2 - self.label.width / 2, self.height / 2 - self.label.height / 2)
        self.change_color()  # Lancer la première fois
        self.timer_event = Clock.schedule_interval(self.change_color, randint(3, 10))

    def change_color(self, dt=None):
        if self.start_time:
            elapsed_time = time.time() - self.start_time
            remaining_time = max(0, self.duration - elapsed_time)
            self.label.text = f"Temps restant : {int(remaining_time)} secondes"

            if elapsed_time >= self.duration:
                self.stop_suite()
                return

        if self.timer_event:
            self.timer_event.cancel()  # Annuler l'événement précédent

        if randint(0, 1) == 0:
            self.color.rgb = (0, 0, 1)  # Couleur bleue
        else:
            self.color.rgb = (1, 0, 0)  # Couleur rouge

        interval = randint(3, 10)  # Intervalle aléatoire entre 3 et 10 secondes
        self.timer_event = Clock.schedule_once(self.change_color, interval)

        self.number_label.text = str(randint(1, 5))  # Nombre aléatoire entre 1 et 5
        self.number_label.pos = (self.width / 2 - self.number_label.width / 2, self.height / 2 + 50)

    def stop_suite(self):
        self.color.rgb = (0.5, 0.5, 0.5)  # Couleur grise initiale
        self.start_time = None
        self.duration = 0
        if self.timer_event:
            self.timer_event.cancel()

        self.button.disabled = False
        self.button.opacity = 1  # Afficher le bouton "Commencer"
        self.label.text = ''
        self.number_label.text = ''

    def on_touch_down(self, touch):
        if self.button.collide_point(*touch.pos):
            return self.button.on_touch_down(touch)
        return super(CustomWidget, self).on_touch_down(touch)


class MyApp(App):
    def build(self):
        return CustomWidget()

    def on_start(self):
        self.title = "reflexe_test"


if __name__ == '__main__':
    MyApp().run()
